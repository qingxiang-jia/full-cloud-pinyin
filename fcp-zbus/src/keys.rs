#[allow(dead_code)]
pub enum Key {
    A = 97,
    B = 98,
    C = 99,
    D = 100,
    E = 101,
    F = 102,
    G = 103,
    H = 104,
    I = 105,
    J = 106,
    K = 107,
    L = 108,
    M = 109,
    N = 110,
    O = 111,
    P = 112,
    Q = 113,
    R = 114,
    S = 115,
    T = 116,
    U = 117,
    V = 118,
    W = 119,
    X = 120,
    Y = 121,
    Z = 122,
    Comma = 44,
    Period = 46,
    Colon = 58,
    SemiColon = 59,
    DoubleQuote = 34,
    SingleQuote = 39,
    QuestionMark = 63,
    Space = 32,
    Enter = 65293,
    Shift = 65505,
    Minus = 45,
    Equal = 61,
    Up = 65362,
    Down = 65364,
    Left = 65361,
    Right = 65363,
    Backspace = 65288,
    Escape = 65307,
    _0 = 48,
    _1 = 49,
    _2 = 50,
    _3 = 51,
    _4 = 52,
    _5 = 53,
    _6 = 54,
    _7 = 55,
    _8 = 56,
    _9 = 57,
}

impl Key {
    pub fn from_u32(num: u32) -> Option<Key> {
        match num {
            97 => Some(Key::A),
            98 => Some(Key::B),
            99 => Some(Key::C),
            100 => Some(Key::D),
            101 => Some(Key::E),
            102 => Some(Key::F),
            103 => Some(Key::G),
            104 => Some(Key::H),
            105 => Some(Key::I),
            106 => Some(Key::J),
            107 => Some(Key::K),
            108 => Some(Key::L),
            109 => Some(Key::M),
            110 => Some(Key::N),
            111 => Some(Key::O),
            112 => Some(Key::P),
            113 => Some(Key::Q),
            114 => Some(Key::R),
            115 => Some(Key::S),
            116 => Some(Key::T),
            117 => Some(Key::U),
            118 => Some(Key::V),
            119 => Some(Key::W),
            120 => Some(Key::X),
            121 => Some(Key::Y),
            122 => Some(Key::Z),
            44 => Some(Key::Comma),
            46 => Some(Key::Period),
            58 => Some(Key::Colon),
            59 => Some(Key::SemiColon),
            32 => Some(Key::Space),
            34 => Some(Key::DoubleQuote),
            39 => Some(Key::SingleQuote),
            63 => Some(Key::QuestionMark),
            65293 => Some(Key::Enter),
            65505 => Some(Key::Shift),
            45 => Some(Key::Minus),
            61 => Some(Key::Equal),
            65362 => Some(Key::Up),
            65364 => Some(Key::Down),
            65361 => Some(Key::Left),
            65363 => Some(Key::Right),
            65288 => Some(Key::Backspace),
            65307 => Some(Key::Escape),
            48 => Some(Key::_0),
            49 => Some(Key::_1),
            50 => Some(Key::_2),
            51 => Some(Key::_3),
            52 => Some(Key::_4),
            53 => Some(Key::_5),
            54 => Some(Key::_6),
            55 => Some(Key::_7),
            56 => Some(Key::_8),
            57 => Some(Key::_9),
            _ => None,
        }
    }

    pub fn to_char(self) -> Option<char> {
        match self {
            Key::A => Some('a'),
            Key::B => Some('b'),
            Key::C => Some('c'),
            Key::D => Some('d'),
            Key::E => Some('e'),
            Key::F => Some('f'),
            Key::G => Some('g'),
            Key::H => Some('h'),
            Key::I => Some('i'),
            Key::J => Some('j'),
            Key::K => Some('k'),
            Key::L => Some('l'),
            Key::M => Some('m'),
            Key::N => Some('n'),
            Key::O => Some('o'),
            Key::P => Some('p'),
            Key::Q => Some('q'),
            Key::R => Some('r'),
            Key::S => Some('s'),
            Key::T => Some('t'),
            Key::U => Some('u'),
            Key::V => Some('v'),
            Key::W => Some('w'),
            Key::X => Some('x'),
            Key::Y => Some('y'),
            Key::Z => Some('z'),
            _ => None,
        }
    }

    pub fn to_usize(self) -> Option<usize> {
        match self {
            Key::_0 => Some(0),
            Key::_1 => Some(1),
            Key::_2 => Some(2),
            Key::_3 => Some(3),
            Key::_4 => Some(4),
            Key::_5 => Some(5),
            Key::_6 => Some(6),
            Key::_7 => Some(7),
            Key::_8 => Some(8),
            Key::_9 => Some(9),
            _ => None,
        }
    }

    pub fn to_full_width_string(self) -> Option<String> {
        match self {
            Key::Comma => Some("，".to_owned()),
            Key::Period => Some("。".to_owned()),
            Key::SemiColon => Some("；".to_owned()),
            Key::Colon => Some("：".to_owned()),
            Key::SingleQuote => Some("‘’".to_owned()),
            Key::DoubleQuote => Some("“”".to_owned()),
            Key::QuestionMark => Some("？".to_owned()),
            _ => None,
        }
    }
}
