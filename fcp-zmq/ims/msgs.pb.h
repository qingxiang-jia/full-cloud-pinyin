// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msgs.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_msgs_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_msgs_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_msgs_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_msgs_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_msgs_2eproto;
class CommandToFcitx;
struct CommandToFcitxDefaultTypeInternal;
extern CommandToFcitxDefaultTypeInternal _CommandToFcitx_default_instance_;
class CommitText;
struct CommitTextDefaultTypeInternal;
extern CommitTextDefaultTypeInternal _CommitText_default_instance_;
class KeyEvent;
struct KeyEventDefaultTypeInternal;
extern KeyEventDefaultTypeInternal _KeyEvent_default_instance_;
class UpdateCandidates;
struct UpdateCandidatesDefaultTypeInternal;
extern UpdateCandidatesDefaultTypeInternal _UpdateCandidates_default_instance_;
class UpdatePreedit;
struct UpdatePreeditDefaultTypeInternal;
extern UpdatePreeditDefaultTypeInternal _UpdatePreedit_default_instance_;
class UpdateSessionStatus;
struct UpdateSessionStatusDefaultTypeInternal;
extern UpdateSessionStatusDefaultTypeInternal _UpdateSessionStatus_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class UpdateSessionStatus final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:UpdateSessionStatus) */ {
 public:
  inline UpdateSessionStatus() : UpdateSessionStatus(nullptr) {}
  ~UpdateSessionStatus() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UpdateSessionStatus(::google::protobuf::internal::ConstantInitialized);

  inline UpdateSessionStatus(const UpdateSessionStatus& from)
      : UpdateSessionStatus(nullptr, from) {}
  UpdateSessionStatus(UpdateSessionStatus&& from) noexcept
    : UpdateSessionStatus() {
    *this = ::std::move(from);
  }

  inline UpdateSessionStatus& operator=(const UpdateSessionStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateSessionStatus& operator=(UpdateSessionStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateSessionStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateSessionStatus* internal_default_instance() {
    return reinterpret_cast<const UpdateSessionStatus*>(
               &_UpdateSessionStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UpdateSessionStatus& a, UpdateSessionStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateSessionStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateSessionStatus* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateSessionStatus* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateSessionStatus>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UpdateSessionStatus& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const UpdateSessionStatus& from) {
    UpdateSessionStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(UpdateSessionStatus* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "UpdateSessionStatus";
  }
  protected:
  explicit UpdateSessionStatus(::google::protobuf::Arena* arena);
  UpdateSessionStatus(::google::protobuf::Arena* arena, const UpdateSessionStatus& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInSessionFieldNumber = 1,
  };
  // bool in_session = 1;
  void clear_in_session() ;
  bool in_session() const;
  void set_in_session(bool value);

  private:
  bool _internal_in_session() const;
  void _internal_set_in_session(bool value);

  public:
  // @@protoc_insertion_point(class_scope:UpdateSessionStatus)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    bool in_session_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msgs_2eproto;
};// -------------------------------------------------------------------

class UpdatePreedit final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:UpdatePreedit) */ {
 public:
  inline UpdatePreedit() : UpdatePreedit(nullptr) {}
  ~UpdatePreedit() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UpdatePreedit(::google::protobuf::internal::ConstantInitialized);

  inline UpdatePreedit(const UpdatePreedit& from)
      : UpdatePreedit(nullptr, from) {}
  UpdatePreedit(UpdatePreedit&& from) noexcept
    : UpdatePreedit() {
    *this = ::std::move(from);
  }

  inline UpdatePreedit& operator=(const UpdatePreedit& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdatePreedit& operator=(UpdatePreedit&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdatePreedit& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdatePreedit* internal_default_instance() {
    return reinterpret_cast<const UpdatePreedit*>(
               &_UpdatePreedit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UpdatePreedit& a, UpdatePreedit& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdatePreedit* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdatePreedit* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdatePreedit* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdatePreedit>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UpdatePreedit& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const UpdatePreedit& from) {
    UpdatePreedit::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(UpdatePreedit* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "UpdatePreedit";
  }
  protected:
  explicit UpdatePreedit(::google::protobuf::Arena* arena);
  UpdatePreedit(::google::protobuf::Arena* arena, const UpdatePreedit& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
  };
  // string text = 1;
  void clear_text() ;
  const std::string& text() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_text(Arg_&& arg, Args_... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* value);

  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(
      const std::string& value);
  std::string* _internal_mutable_text();

  public:
  // @@protoc_insertion_point(class_scope:UpdatePreedit)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      26, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr text_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msgs_2eproto;
};// -------------------------------------------------------------------

class UpdateCandidates final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:UpdateCandidates) */ {
 public:
  inline UpdateCandidates() : UpdateCandidates(nullptr) {}
  ~UpdateCandidates() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UpdateCandidates(::google::protobuf::internal::ConstantInitialized);

  inline UpdateCandidates(const UpdateCandidates& from)
      : UpdateCandidates(nullptr, from) {}
  UpdateCandidates(UpdateCandidates&& from) noexcept
    : UpdateCandidates() {
    *this = ::std::move(from);
  }

  inline UpdateCandidates& operator=(const UpdateCandidates& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateCandidates& operator=(UpdateCandidates&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateCandidates& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateCandidates* internal_default_instance() {
    return reinterpret_cast<const UpdateCandidates*>(
               &_UpdateCandidates_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UpdateCandidates& a, UpdateCandidates& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateCandidates* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateCandidates* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateCandidates* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateCandidates>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UpdateCandidates& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const UpdateCandidates& from) {
    UpdateCandidates::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(UpdateCandidates* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "UpdateCandidates";
  }
  protected:
  explicit UpdateCandidates(::google::protobuf::Arena* arena);
  UpdateCandidates(::google::protobuf::Arena* arena, const UpdateCandidates& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCandidatesFieldNumber = 1,
  };
  // repeated string candidates = 1;
  int candidates_size() const;
  private:
  int _internal_candidates_size() const;

  public:
  void clear_candidates() ;
  const std::string& candidates(int index) const;
  std::string* mutable_candidates(int index);
  void set_candidates(int index, const std::string& value);
  void set_candidates(int index, std::string&& value);
  void set_candidates(int index, const char* value);
  void set_candidates(int index, const char* value, std::size_t size);
  void set_candidates(int index, absl::string_view value);
  std::string* add_candidates();
  void add_candidates(const std::string& value);
  void add_candidates(std::string&& value);
  void add_candidates(const char* value);
  void add_candidates(const char* value, std::size_t size);
  void add_candidates(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& candidates() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_candidates();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_candidates() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_candidates();

  public:
  // @@protoc_insertion_point(class_scope:UpdateCandidates)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      35, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField<std::string> candidates_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msgs_2eproto;
};// -------------------------------------------------------------------

class KeyEvent final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KeyEvent) */ {
 public:
  inline KeyEvent() : KeyEvent(nullptr) {}
  ~KeyEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR KeyEvent(::google::protobuf::internal::ConstantInitialized);

  inline KeyEvent(const KeyEvent& from)
      : KeyEvent(nullptr, from) {}
  KeyEvent(KeyEvent&& from) noexcept
    : KeyEvent() {
    *this = ::std::move(from);
  }

  inline KeyEvent& operator=(const KeyEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyEvent& operator=(KeyEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KeyEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeyEvent* internal_default_instance() {
    return reinterpret_cast<const KeyEvent*>(
               &_KeyEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(KeyEvent& a, KeyEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KeyEvent* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KeyEvent>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const KeyEvent& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const KeyEvent& from) {
    KeyEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(KeyEvent* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "KeyEvent";
  }
  protected:
  explicit KeyEvent(::google::protobuf::Arena* arena);
  KeyEvent(::google::protobuf::Arena* arena, const KeyEvent& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
  };
  // uint32 key = 1;
  void clear_key() ;
  ::uint32_t key() const;
  void set_key(::uint32_t value);

  private:
  ::uint32_t _internal_key() const;
  void _internal_set_key(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:KeyEvent)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::uint32_t key_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msgs_2eproto;
};// -------------------------------------------------------------------

class CommitText final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CommitText) */ {
 public:
  inline CommitText() : CommitText(nullptr) {}
  ~CommitText() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CommitText(::google::protobuf::internal::ConstantInitialized);

  inline CommitText(const CommitText& from)
      : CommitText(nullptr, from) {}
  CommitText(CommitText&& from) noexcept
    : CommitText() {
    *this = ::std::move(from);
  }

  inline CommitText& operator=(const CommitText& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommitText& operator=(CommitText&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommitText& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommitText* internal_default_instance() {
    return reinterpret_cast<const CommitText*>(
               &_CommitText_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CommitText& a, CommitText& b) {
    a.Swap(&b);
  }
  inline void Swap(CommitText* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommitText* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommitText* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommitText>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CommitText& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CommitText& from) {
    CommitText::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CommitText* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "CommitText";
  }
  protected:
  explicit CommitText(::google::protobuf::Arena* arena);
  CommitText(::google::protobuf::Arena* arena, const CommitText& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
  };
  // string text = 1;
  void clear_text() ;
  const std::string& text() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_text(Arg_&& arg, Args_... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* value);

  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(
      const std::string& value);
  std::string* _internal_mutable_text();

  public:
  // @@protoc_insertion_point(class_scope:CommitText)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      23, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr text_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msgs_2eproto;
};// -------------------------------------------------------------------

class CommandToFcitx final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CommandToFcitx) */ {
 public:
  inline CommandToFcitx() : CommandToFcitx(nullptr) {}
  ~CommandToFcitx() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CommandToFcitx(::google::protobuf::internal::ConstantInitialized);

  inline CommandToFcitx(const CommandToFcitx& from)
      : CommandToFcitx(nullptr, from) {}
  CommandToFcitx(CommandToFcitx&& from) noexcept
    : CommandToFcitx() {
    *this = ::std::move(from);
  }

  inline CommandToFcitx& operator=(const CommandToFcitx& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandToFcitx& operator=(CommandToFcitx&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandToFcitx& default_instance() {
    return *internal_default_instance();
  }
  enum CommandCase {
    kUpdateSessionStatus = 1,
    kCommitText = 2,
    kUpdatePreedit = 3,
    kUpdateCandidates = 4,
    COMMAND_NOT_SET = 0,
  };

  static inline const CommandToFcitx* internal_default_instance() {
    return reinterpret_cast<const CommandToFcitx*>(
               &_CommandToFcitx_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CommandToFcitx& a, CommandToFcitx& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandToFcitx* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandToFcitx* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandToFcitx* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandToFcitx>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CommandToFcitx& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CommandToFcitx& from) {
    CommandToFcitx::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CommandToFcitx* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "CommandToFcitx";
  }
  protected:
  explicit CommandToFcitx(::google::protobuf::Arena* arena);
  CommandToFcitx(::google::protobuf::Arena* arena, const CommandToFcitx& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdateSessionStatusFieldNumber = 1,
    kCommitTextFieldNumber = 2,
    kUpdatePreeditFieldNumber = 3,
    kUpdateCandidatesFieldNumber = 4,
  };
  // .UpdateSessionStatus update_session_status = 1;
  bool has_update_session_status() const;
  private:
  bool _internal_has_update_session_status() const;

  public:
  void clear_update_session_status() ;
  const ::UpdateSessionStatus& update_session_status() const;
  PROTOBUF_NODISCARD ::UpdateSessionStatus* release_update_session_status();
  ::UpdateSessionStatus* mutable_update_session_status();
  void set_allocated_update_session_status(::UpdateSessionStatus* value);
  void unsafe_arena_set_allocated_update_session_status(::UpdateSessionStatus* value);
  ::UpdateSessionStatus* unsafe_arena_release_update_session_status();

  private:
  const ::UpdateSessionStatus& _internal_update_session_status() const;
  ::UpdateSessionStatus* _internal_mutable_update_session_status();

  public:
  // .CommitText commit_text = 2;
  bool has_commit_text() const;
  private:
  bool _internal_has_commit_text() const;

  public:
  void clear_commit_text() ;
  const ::CommitText& commit_text() const;
  PROTOBUF_NODISCARD ::CommitText* release_commit_text();
  ::CommitText* mutable_commit_text();
  void set_allocated_commit_text(::CommitText* value);
  void unsafe_arena_set_allocated_commit_text(::CommitText* value);
  ::CommitText* unsafe_arena_release_commit_text();

  private:
  const ::CommitText& _internal_commit_text() const;
  ::CommitText* _internal_mutable_commit_text();

  public:
  // .UpdatePreedit update_preedit = 3;
  bool has_update_preedit() const;
  private:
  bool _internal_has_update_preedit() const;

  public:
  void clear_update_preedit() ;
  const ::UpdatePreedit& update_preedit() const;
  PROTOBUF_NODISCARD ::UpdatePreedit* release_update_preedit();
  ::UpdatePreedit* mutable_update_preedit();
  void set_allocated_update_preedit(::UpdatePreedit* value);
  void unsafe_arena_set_allocated_update_preedit(::UpdatePreedit* value);
  ::UpdatePreedit* unsafe_arena_release_update_preedit();

  private:
  const ::UpdatePreedit& _internal_update_preedit() const;
  ::UpdatePreedit* _internal_mutable_update_preedit();

  public:
  // .UpdateCandidates update_candidates = 4;
  bool has_update_candidates() const;
  private:
  bool _internal_has_update_candidates() const;

  public:
  void clear_update_candidates() ;
  const ::UpdateCandidates& update_candidates() const;
  PROTOBUF_NODISCARD ::UpdateCandidates* release_update_candidates();
  ::UpdateCandidates* mutable_update_candidates();
  void set_allocated_update_candidates(::UpdateCandidates* value);
  void unsafe_arena_set_allocated_update_candidates(::UpdateCandidates* value);
  ::UpdateCandidates* unsafe_arena_release_update_candidates();

  private:
  const ::UpdateCandidates& _internal_update_candidates() const;
  ::UpdateCandidates* _internal_mutable_update_candidates();

  public:
  void clear_command();
  CommandCase command_case() const;
  // @@protoc_insertion_point(class_scope:CommandToFcitx)
 private:
  class _Internal;
  void set_has_update_session_status();
  void set_has_commit_text();
  void set_has_update_preedit();
  void set_has_update_candidates();

  inline bool has_command() const;
  inline void clear_has_command();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 4, 4,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    union CommandUnion {
      constexpr CommandUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::UpdateSessionStatus* update_session_status_;
      ::CommitText* commit_text_;
      ::UpdatePreedit* update_preedit_;
      ::UpdateCandidates* update_candidates_;
    } command_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msgs_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// CommandToFcitx

// .UpdateSessionStatus update_session_status = 1;
inline bool CommandToFcitx::has_update_session_status() const {
  return command_case() == kUpdateSessionStatus;
}
inline bool CommandToFcitx::_internal_has_update_session_status() const {
  return command_case() == kUpdateSessionStatus;
}
inline void CommandToFcitx::set_has_update_session_status() {
  _impl_._oneof_case_[0] = kUpdateSessionStatus;
}
inline void CommandToFcitx::clear_update_session_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (command_case() == kUpdateSessionStatus) {
    if (GetArena() == nullptr) {
      delete _impl_.command_.update_session_status_;
    }
    clear_has_command();
  }
}
inline ::UpdateSessionStatus* CommandToFcitx::release_update_session_status() {
  // @@protoc_insertion_point(field_release:CommandToFcitx.update_session_status)
  if (command_case() == kUpdateSessionStatus) {
    clear_has_command();
    auto* temp = _impl_.command_.update_session_status_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.command_.update_session_status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::UpdateSessionStatus& CommandToFcitx::_internal_update_session_status() const {
  return command_case() == kUpdateSessionStatus ? *_impl_.command_.update_session_status_ : reinterpret_cast<::UpdateSessionStatus&>(::_UpdateSessionStatus_default_instance_);
}
inline const ::UpdateSessionStatus& CommandToFcitx::update_session_status() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CommandToFcitx.update_session_status)
  return _internal_update_session_status();
}
inline ::UpdateSessionStatus* CommandToFcitx::unsafe_arena_release_update_session_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CommandToFcitx.update_session_status)
  if (command_case() == kUpdateSessionStatus) {
    clear_has_command();
    auto* temp = _impl_.command_.update_session_status_;
    _impl_.command_.update_session_status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CommandToFcitx::unsafe_arena_set_allocated_update_session_status(::UpdateSessionStatus* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_command();
  if (value) {
    set_has_update_session_status();
    _impl_.command_.update_session_status_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CommandToFcitx.update_session_status)
}
inline ::UpdateSessionStatus* CommandToFcitx::_internal_mutable_update_session_status() {
  if (command_case() != kUpdateSessionStatus) {
    clear_command();
    set_has_update_session_status();
    _impl_.command_.update_session_status_ = CreateMaybeMessage<::UpdateSessionStatus>(GetArena());
  }
  return _impl_.command_.update_session_status_;
}
inline ::UpdateSessionStatus* CommandToFcitx::mutable_update_session_status() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::UpdateSessionStatus* _msg = _internal_mutable_update_session_status();
  // @@protoc_insertion_point(field_mutable:CommandToFcitx.update_session_status)
  return _msg;
}

// .CommitText commit_text = 2;
inline bool CommandToFcitx::has_commit_text() const {
  return command_case() == kCommitText;
}
inline bool CommandToFcitx::_internal_has_commit_text() const {
  return command_case() == kCommitText;
}
inline void CommandToFcitx::set_has_commit_text() {
  _impl_._oneof_case_[0] = kCommitText;
}
inline void CommandToFcitx::clear_commit_text() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (command_case() == kCommitText) {
    if (GetArena() == nullptr) {
      delete _impl_.command_.commit_text_;
    }
    clear_has_command();
  }
}
inline ::CommitText* CommandToFcitx::release_commit_text() {
  // @@protoc_insertion_point(field_release:CommandToFcitx.commit_text)
  if (command_case() == kCommitText) {
    clear_has_command();
    auto* temp = _impl_.command_.commit_text_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.command_.commit_text_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CommitText& CommandToFcitx::_internal_commit_text() const {
  return command_case() == kCommitText ? *_impl_.command_.commit_text_ : reinterpret_cast<::CommitText&>(::_CommitText_default_instance_);
}
inline const ::CommitText& CommandToFcitx::commit_text() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CommandToFcitx.commit_text)
  return _internal_commit_text();
}
inline ::CommitText* CommandToFcitx::unsafe_arena_release_commit_text() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CommandToFcitx.commit_text)
  if (command_case() == kCommitText) {
    clear_has_command();
    auto* temp = _impl_.command_.commit_text_;
    _impl_.command_.commit_text_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CommandToFcitx::unsafe_arena_set_allocated_commit_text(::CommitText* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_command();
  if (value) {
    set_has_commit_text();
    _impl_.command_.commit_text_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CommandToFcitx.commit_text)
}
inline ::CommitText* CommandToFcitx::_internal_mutable_commit_text() {
  if (command_case() != kCommitText) {
    clear_command();
    set_has_commit_text();
    _impl_.command_.commit_text_ = CreateMaybeMessage<::CommitText>(GetArena());
  }
  return _impl_.command_.commit_text_;
}
inline ::CommitText* CommandToFcitx::mutable_commit_text() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::CommitText* _msg = _internal_mutable_commit_text();
  // @@protoc_insertion_point(field_mutable:CommandToFcitx.commit_text)
  return _msg;
}

// .UpdatePreedit update_preedit = 3;
inline bool CommandToFcitx::has_update_preedit() const {
  return command_case() == kUpdatePreedit;
}
inline bool CommandToFcitx::_internal_has_update_preedit() const {
  return command_case() == kUpdatePreedit;
}
inline void CommandToFcitx::set_has_update_preedit() {
  _impl_._oneof_case_[0] = kUpdatePreedit;
}
inline void CommandToFcitx::clear_update_preedit() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (command_case() == kUpdatePreedit) {
    if (GetArena() == nullptr) {
      delete _impl_.command_.update_preedit_;
    }
    clear_has_command();
  }
}
inline ::UpdatePreedit* CommandToFcitx::release_update_preedit() {
  // @@protoc_insertion_point(field_release:CommandToFcitx.update_preedit)
  if (command_case() == kUpdatePreedit) {
    clear_has_command();
    auto* temp = _impl_.command_.update_preedit_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.command_.update_preedit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::UpdatePreedit& CommandToFcitx::_internal_update_preedit() const {
  return command_case() == kUpdatePreedit ? *_impl_.command_.update_preedit_ : reinterpret_cast<::UpdatePreedit&>(::_UpdatePreedit_default_instance_);
}
inline const ::UpdatePreedit& CommandToFcitx::update_preedit() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CommandToFcitx.update_preedit)
  return _internal_update_preedit();
}
inline ::UpdatePreedit* CommandToFcitx::unsafe_arena_release_update_preedit() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CommandToFcitx.update_preedit)
  if (command_case() == kUpdatePreedit) {
    clear_has_command();
    auto* temp = _impl_.command_.update_preedit_;
    _impl_.command_.update_preedit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CommandToFcitx::unsafe_arena_set_allocated_update_preedit(::UpdatePreedit* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_command();
  if (value) {
    set_has_update_preedit();
    _impl_.command_.update_preedit_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CommandToFcitx.update_preedit)
}
inline ::UpdatePreedit* CommandToFcitx::_internal_mutable_update_preedit() {
  if (command_case() != kUpdatePreedit) {
    clear_command();
    set_has_update_preedit();
    _impl_.command_.update_preedit_ = CreateMaybeMessage<::UpdatePreedit>(GetArena());
  }
  return _impl_.command_.update_preedit_;
}
inline ::UpdatePreedit* CommandToFcitx::mutable_update_preedit() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::UpdatePreedit* _msg = _internal_mutable_update_preedit();
  // @@protoc_insertion_point(field_mutable:CommandToFcitx.update_preedit)
  return _msg;
}

// .UpdateCandidates update_candidates = 4;
inline bool CommandToFcitx::has_update_candidates() const {
  return command_case() == kUpdateCandidates;
}
inline bool CommandToFcitx::_internal_has_update_candidates() const {
  return command_case() == kUpdateCandidates;
}
inline void CommandToFcitx::set_has_update_candidates() {
  _impl_._oneof_case_[0] = kUpdateCandidates;
}
inline void CommandToFcitx::clear_update_candidates() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (command_case() == kUpdateCandidates) {
    if (GetArena() == nullptr) {
      delete _impl_.command_.update_candidates_;
    }
    clear_has_command();
  }
}
inline ::UpdateCandidates* CommandToFcitx::release_update_candidates() {
  // @@protoc_insertion_point(field_release:CommandToFcitx.update_candidates)
  if (command_case() == kUpdateCandidates) {
    clear_has_command();
    auto* temp = _impl_.command_.update_candidates_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.command_.update_candidates_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::UpdateCandidates& CommandToFcitx::_internal_update_candidates() const {
  return command_case() == kUpdateCandidates ? *_impl_.command_.update_candidates_ : reinterpret_cast<::UpdateCandidates&>(::_UpdateCandidates_default_instance_);
}
inline const ::UpdateCandidates& CommandToFcitx::update_candidates() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CommandToFcitx.update_candidates)
  return _internal_update_candidates();
}
inline ::UpdateCandidates* CommandToFcitx::unsafe_arena_release_update_candidates() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CommandToFcitx.update_candidates)
  if (command_case() == kUpdateCandidates) {
    clear_has_command();
    auto* temp = _impl_.command_.update_candidates_;
    _impl_.command_.update_candidates_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CommandToFcitx::unsafe_arena_set_allocated_update_candidates(::UpdateCandidates* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_command();
  if (value) {
    set_has_update_candidates();
    _impl_.command_.update_candidates_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CommandToFcitx.update_candidates)
}
inline ::UpdateCandidates* CommandToFcitx::_internal_mutable_update_candidates() {
  if (command_case() != kUpdateCandidates) {
    clear_command();
    set_has_update_candidates();
    _impl_.command_.update_candidates_ = CreateMaybeMessage<::UpdateCandidates>(GetArena());
  }
  return _impl_.command_.update_candidates_;
}
inline ::UpdateCandidates* CommandToFcitx::mutable_update_candidates() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::UpdateCandidates* _msg = _internal_mutable_update_candidates();
  // @@protoc_insertion_point(field_mutable:CommandToFcitx.update_candidates)
  return _msg;
}

inline bool CommandToFcitx::has_command() const {
  return command_case() != COMMAND_NOT_SET;
}
inline void CommandToFcitx::clear_has_command() {
  _impl_._oneof_case_[0] = COMMAND_NOT_SET;
}
inline CommandToFcitx::CommandCase CommandToFcitx::command_case() const {
  return CommandToFcitx::CommandCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// CommitText

// string text = 1;
inline void CommitText::clear_text() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.text_.ClearToEmpty();
}
inline const std::string& CommitText::text() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CommitText.text)
  return _internal_text();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CommitText::set_text(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.text_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:CommitText.text)
}
inline std::string* CommitText::mutable_text() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:CommitText.text)
  return _s;
}
inline const std::string& CommitText::_internal_text() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.text_.Get();
}
inline void CommitText::_internal_set_text(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.text_.Set(value, GetArena());
}
inline std::string* CommitText::_internal_mutable_text() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.text_.Mutable( GetArena());
}
inline std::string* CommitText::release_text() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CommitText.text)
  return _impl_.text_.Release();
}
inline void CommitText::set_allocated_text(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.text_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.text_.IsDefault()) {
          _impl_.text_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CommitText.text)
}

// -------------------------------------------------------------------

// UpdatePreedit

// string text = 1;
inline void UpdatePreedit::clear_text() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.text_.ClearToEmpty();
}
inline const std::string& UpdatePreedit::text() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:UpdatePreedit.text)
  return _internal_text();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UpdatePreedit::set_text(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.text_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:UpdatePreedit.text)
}
inline std::string* UpdatePreedit::mutable_text() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:UpdatePreedit.text)
  return _s;
}
inline const std::string& UpdatePreedit::_internal_text() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.text_.Get();
}
inline void UpdatePreedit::_internal_set_text(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.text_.Set(value, GetArena());
}
inline std::string* UpdatePreedit::_internal_mutable_text() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.text_.Mutable( GetArena());
}
inline std::string* UpdatePreedit::release_text() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:UpdatePreedit.text)
  return _impl_.text_.Release();
}
inline void UpdatePreedit::set_allocated_text(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.text_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.text_.IsDefault()) {
          _impl_.text_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:UpdatePreedit.text)
}

// -------------------------------------------------------------------

// UpdateSessionStatus

// bool in_session = 1;
inline void UpdateSessionStatus::clear_in_session() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.in_session_ = false;
}
inline bool UpdateSessionStatus::in_session() const {
  // @@protoc_insertion_point(field_get:UpdateSessionStatus.in_session)
  return _internal_in_session();
}
inline void UpdateSessionStatus::set_in_session(bool value) {
  _internal_set_in_session(value);
  // @@protoc_insertion_point(field_set:UpdateSessionStatus.in_session)
}
inline bool UpdateSessionStatus::_internal_in_session() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.in_session_;
}
inline void UpdateSessionStatus::_internal_set_in_session(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.in_session_ = value;
}

// -------------------------------------------------------------------

// UpdateCandidates

// repeated string candidates = 1;
inline int UpdateCandidates::_internal_candidates_size() const {
  return _internal_candidates().size();
}
inline int UpdateCandidates::candidates_size() const {
  return _internal_candidates_size();
}
inline void UpdateCandidates::clear_candidates() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.candidates_.Clear();
}
inline std::string* UpdateCandidates::add_candidates()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_candidates()->Add();
  // @@protoc_insertion_point(field_add_mutable:UpdateCandidates.candidates)
  return _s;
}
inline const std::string& UpdateCandidates::candidates(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:UpdateCandidates.candidates)
  return _internal_candidates().Get(index);
}
inline std::string* UpdateCandidates::mutable_candidates(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:UpdateCandidates.candidates)
  return _internal_mutable_candidates()->Mutable(index);
}
inline void UpdateCandidates::set_candidates(int index, const std::string& value) {
  _internal_mutable_candidates()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:UpdateCandidates.candidates)
}
inline void UpdateCandidates::set_candidates(int index, std::string&& value) {
  _internal_mutable_candidates()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:UpdateCandidates.candidates)
}
inline void UpdateCandidates::set_candidates(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_candidates()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:UpdateCandidates.candidates)
}
inline void UpdateCandidates::set_candidates(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_candidates()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UpdateCandidates.candidates)
}
inline void UpdateCandidates::set_candidates(int index, absl::string_view value) {
  _internal_mutable_candidates()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:UpdateCandidates.candidates)
}
inline void UpdateCandidates::add_candidates(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_candidates()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:UpdateCandidates.candidates)
}
inline void UpdateCandidates::add_candidates(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_candidates()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:UpdateCandidates.candidates)
}
inline void UpdateCandidates::add_candidates(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_candidates()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:UpdateCandidates.candidates)
}
inline void UpdateCandidates::add_candidates(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_candidates()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:UpdateCandidates.candidates)
}
inline void UpdateCandidates::add_candidates(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_candidates()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:UpdateCandidates.candidates)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
UpdateCandidates::candidates() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:UpdateCandidates.candidates)
  return _internal_candidates();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
UpdateCandidates::mutable_candidates() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:UpdateCandidates.candidates)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_candidates();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
UpdateCandidates::_internal_candidates() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.candidates_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
UpdateCandidates::_internal_mutable_candidates() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.candidates_;
}

// -------------------------------------------------------------------

// KeyEvent

// uint32 key = 1;
inline void KeyEvent::clear_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.key_ = 0u;
}
inline ::uint32_t KeyEvent::key() const {
  // @@protoc_insertion_point(field_get:KeyEvent.key)
  return _internal_key();
}
inline void KeyEvent::set_key(::uint32_t value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:KeyEvent.key)
}
inline ::uint32_t KeyEvent::_internal_key() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.key_;
}
inline void KeyEvent::_internal_set_key(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.key_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_msgs_2eproto_2epb_2eh
