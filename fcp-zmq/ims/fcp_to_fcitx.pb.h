// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fcp_to_fcitx.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_fcp_5fto_5ffcitx_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_fcp_5fto_5ffcitx_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_fcp_5fto_5ffcitx_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_fcp_5fto_5ffcitx_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_fcp_5fto_5ffcitx_2eproto;
class CommandToFcitx;
struct CommandToFcitxDefaultTypeInternal;
extern CommandToFcitxDefaultTypeInternal _CommandToFcitx_default_instance_;
class CommitText;
struct CommitTextDefaultTypeInternal;
extern CommitTextDefaultTypeInternal _CommitText_default_instance_;
class LookupTable;
struct LookupTableDefaultTypeInternal;
extern LookupTableDefaultTypeInternal _LookupTable_default_instance_;
class UpdateLookuptable;
struct UpdateLookuptableDefaultTypeInternal;
extern UpdateLookuptableDefaultTypeInternal _UpdateLookuptable_default_instance_;
class UpdatePreedit;
struct UpdatePreeditDefaultTypeInternal;
extern UpdatePreeditDefaultTypeInternal _UpdatePreedit_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class UpdatePreedit final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:UpdatePreedit) */ {
 public:
  inline UpdatePreedit() : UpdatePreedit(nullptr) {}
  ~UpdatePreedit() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UpdatePreedit(::google::protobuf::internal::ConstantInitialized);

  inline UpdatePreedit(const UpdatePreedit& from)
      : UpdatePreedit(nullptr, from) {}
  UpdatePreedit(UpdatePreedit&& from) noexcept
    : UpdatePreedit() {
    *this = ::std::move(from);
  }

  inline UpdatePreedit& operator=(const UpdatePreedit& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdatePreedit& operator=(UpdatePreedit&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdatePreedit& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdatePreedit* internal_default_instance() {
    return reinterpret_cast<const UpdatePreedit*>(
               &_UpdatePreedit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UpdatePreedit& a, UpdatePreedit& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdatePreedit* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdatePreedit* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdatePreedit* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdatePreedit>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UpdatePreedit& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const UpdatePreedit& from) {
    UpdatePreedit::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(UpdatePreedit* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "UpdatePreedit";
  }
  protected:
  explicit UpdatePreedit(::google::protobuf::Arena* arena);
  UpdatePreedit(::google::protobuf::Arena* arena, const UpdatePreedit& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
  };
  // string text = 1;
  void clear_text() ;
  const std::string& text() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_text(Arg_&& arg, Args_... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* value);

  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(
      const std::string& value);
  std::string* _internal_mutable_text();

  public:
  // @@protoc_insertion_point(class_scope:UpdatePreedit)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      26, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr text_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fcp_5fto_5ffcitx_2eproto;
};// -------------------------------------------------------------------

class LookupTable final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LookupTable) */ {
 public:
  inline LookupTable() : LookupTable(nullptr) {}
  ~LookupTable() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LookupTable(::google::protobuf::internal::ConstantInitialized);

  inline LookupTable(const LookupTable& from)
      : LookupTable(nullptr, from) {}
  LookupTable(LookupTable&& from) noexcept
    : LookupTable() {
    *this = ::std::move(from);
  }

  inline LookupTable& operator=(const LookupTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline LookupTable& operator=(LookupTable&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LookupTable& default_instance() {
    return *internal_default_instance();
  }
  static inline const LookupTable* internal_default_instance() {
    return reinterpret_cast<const LookupTable*>(
               &_LookupTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LookupTable& a, LookupTable& b) {
    a.Swap(&b);
  }
  inline void Swap(LookupTable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LookupTable* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LookupTable* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LookupTable>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LookupTable& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const LookupTable& from) {
    LookupTable::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(LookupTable* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "LookupTable";
  }
  protected:
  explicit LookupTable(::google::protobuf::Arena* arena);
  LookupTable(::google::protobuf::Arena* arena, const LookupTable& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCandidatesFieldNumber = 1,
  };
  // repeated string candidates = 1;
  int candidates_size() const;
  private:
  int _internal_candidates_size() const;

  public:
  void clear_candidates() ;
  const std::string& candidates(int index) const;
  std::string* mutable_candidates(int index);
  void set_candidates(int index, const std::string& value);
  void set_candidates(int index, std::string&& value);
  void set_candidates(int index, const char* value);
  void set_candidates(int index, const char* value, std::size_t size);
  void set_candidates(int index, absl::string_view value);
  std::string* add_candidates();
  void add_candidates(const std::string& value);
  void add_candidates(std::string&& value);
  void add_candidates(const char* value);
  void add_candidates(const char* value, std::size_t size);
  void add_candidates(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& candidates() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_candidates();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_candidates() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_candidates();

  public:
  // @@protoc_insertion_point(class_scope:LookupTable)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      30, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField<std::string> candidates_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fcp_5fto_5ffcitx_2eproto;
};// -------------------------------------------------------------------

class CommitText final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CommitText) */ {
 public:
  inline CommitText() : CommitText(nullptr) {}
  ~CommitText() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CommitText(::google::protobuf::internal::ConstantInitialized);

  inline CommitText(const CommitText& from)
      : CommitText(nullptr, from) {}
  CommitText(CommitText&& from) noexcept
    : CommitText() {
    *this = ::std::move(from);
  }

  inline CommitText& operator=(const CommitText& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommitText& operator=(CommitText&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommitText& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommitText* internal_default_instance() {
    return reinterpret_cast<const CommitText*>(
               &_CommitText_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CommitText& a, CommitText& b) {
    a.Swap(&b);
  }
  inline void Swap(CommitText* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommitText* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommitText* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommitText>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CommitText& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CommitText& from) {
    CommitText::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CommitText* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "CommitText";
  }
  protected:
  explicit CommitText(::google::protobuf::Arena* arena);
  CommitText(::google::protobuf::Arena* arena, const CommitText& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
  };
  // string text = 1;
  void clear_text() ;
  const std::string& text() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_text(Arg_&& arg, Args_... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* value);

  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(
      const std::string& value);
  std::string* _internal_mutable_text();

  public:
  // @@protoc_insertion_point(class_scope:CommitText)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      23, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr text_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fcp_5fto_5ffcitx_2eproto;
};// -------------------------------------------------------------------

class UpdateLookuptable final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:UpdateLookuptable) */ {
 public:
  inline UpdateLookuptable() : UpdateLookuptable(nullptr) {}
  ~UpdateLookuptable() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UpdateLookuptable(::google::protobuf::internal::ConstantInitialized);

  inline UpdateLookuptable(const UpdateLookuptable& from)
      : UpdateLookuptable(nullptr, from) {}
  UpdateLookuptable(UpdateLookuptable&& from) noexcept
    : UpdateLookuptable() {
    *this = ::std::move(from);
  }

  inline UpdateLookuptable& operator=(const UpdateLookuptable& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateLookuptable& operator=(UpdateLookuptable&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateLookuptable& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateLookuptable* internal_default_instance() {
    return reinterpret_cast<const UpdateLookuptable*>(
               &_UpdateLookuptable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UpdateLookuptable& a, UpdateLookuptable& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateLookuptable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateLookuptable* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateLookuptable* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateLookuptable>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UpdateLookuptable& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const UpdateLookuptable& from) {
    UpdateLookuptable::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(UpdateLookuptable* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "UpdateLookuptable";
  }
  protected:
  explicit UpdateLookuptable(::google::protobuf::Arena* arena);
  UpdateLookuptable(::google::protobuf::Arena* arena, const UpdateLookuptable& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLtFieldNumber = 1,
  };
  // .LookupTable lt = 1;
  bool has_lt() const;
  void clear_lt() ;
  const ::LookupTable& lt() const;
  PROTOBUF_NODISCARD ::LookupTable* release_lt();
  ::LookupTable* mutable_lt();
  void set_allocated_lt(::LookupTable* value);
  void unsafe_arena_set_allocated_lt(::LookupTable* value);
  ::LookupTable* unsafe_arena_release_lt();

  private:
  const ::LookupTable& _internal_lt() const;
  ::LookupTable* _internal_mutable_lt();

  public:
  // @@protoc_insertion_point(class_scope:UpdateLookuptable)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::LookupTable* lt_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fcp_5fto_5ffcitx_2eproto;
};// -------------------------------------------------------------------

class CommandToFcitx final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CommandToFcitx) */ {
 public:
  inline CommandToFcitx() : CommandToFcitx(nullptr) {}
  ~CommandToFcitx() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CommandToFcitx(::google::protobuf::internal::ConstantInitialized);

  inline CommandToFcitx(const CommandToFcitx& from)
      : CommandToFcitx(nullptr, from) {}
  CommandToFcitx(CommandToFcitx&& from) noexcept
    : CommandToFcitx() {
    *this = ::std::move(from);
  }

  inline CommandToFcitx& operator=(const CommandToFcitx& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandToFcitx& operator=(CommandToFcitx&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandToFcitx& default_instance() {
    return *internal_default_instance();
  }
  enum CommandCase {
    kCommitText = 1,
    kUpdatePreedut = 2,
    kUpdateLt = 3,
    COMMAND_NOT_SET = 0,
  };

  static inline const CommandToFcitx* internal_default_instance() {
    return reinterpret_cast<const CommandToFcitx*>(
               &_CommandToFcitx_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CommandToFcitx& a, CommandToFcitx& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandToFcitx* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandToFcitx* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandToFcitx* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandToFcitx>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CommandToFcitx& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CommandToFcitx& from) {
    CommandToFcitx::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CommandToFcitx* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "CommandToFcitx";
  }
  protected:
  explicit CommandToFcitx(::google::protobuf::Arena* arena);
  CommandToFcitx(::google::protobuf::Arena* arena, const CommandToFcitx& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommitTextFieldNumber = 1,
    kUpdatePreedutFieldNumber = 2,
    kUpdateLtFieldNumber = 3,
  };
  // .CommitText commit_text = 1;
  bool has_commit_text() const;
  private:
  bool _internal_has_commit_text() const;

  public:
  void clear_commit_text() ;
  const ::CommitText& commit_text() const;
  PROTOBUF_NODISCARD ::CommitText* release_commit_text();
  ::CommitText* mutable_commit_text();
  void set_allocated_commit_text(::CommitText* value);
  void unsafe_arena_set_allocated_commit_text(::CommitText* value);
  ::CommitText* unsafe_arena_release_commit_text();

  private:
  const ::CommitText& _internal_commit_text() const;
  ::CommitText* _internal_mutable_commit_text();

  public:
  // .UpdatePreedit update_preedut = 2;
  bool has_update_preedut() const;
  private:
  bool _internal_has_update_preedut() const;

  public:
  void clear_update_preedut() ;
  const ::UpdatePreedit& update_preedut() const;
  PROTOBUF_NODISCARD ::UpdatePreedit* release_update_preedut();
  ::UpdatePreedit* mutable_update_preedut();
  void set_allocated_update_preedut(::UpdatePreedit* value);
  void unsafe_arena_set_allocated_update_preedut(::UpdatePreedit* value);
  ::UpdatePreedit* unsafe_arena_release_update_preedut();

  private:
  const ::UpdatePreedit& _internal_update_preedut() const;
  ::UpdatePreedit* _internal_mutable_update_preedut();

  public:
  // .UpdateLookuptable update_lt = 3;
  bool has_update_lt() const;
  private:
  bool _internal_has_update_lt() const;

  public:
  void clear_update_lt() ;
  const ::UpdateLookuptable& update_lt() const;
  PROTOBUF_NODISCARD ::UpdateLookuptable* release_update_lt();
  ::UpdateLookuptable* mutable_update_lt();
  void set_allocated_update_lt(::UpdateLookuptable* value);
  void unsafe_arena_set_allocated_update_lt(::UpdateLookuptable* value);
  ::UpdateLookuptable* unsafe_arena_release_update_lt();

  private:
  const ::UpdateLookuptable& _internal_update_lt() const;
  ::UpdateLookuptable* _internal_mutable_update_lt();

  public:
  void clear_command();
  CommandCase command_case() const;
  // @@protoc_insertion_point(class_scope:CommandToFcitx)
 private:
  class _Internal;
  void set_has_commit_text();
  void set_has_update_preedut();
  void set_has_update_lt();

  inline bool has_command() const;
  inline void clear_has_command();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 3, 3,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    union CommandUnion {
      constexpr CommandUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::CommitText* commit_text_;
      ::UpdatePreedit* update_preedut_;
      ::UpdateLookuptable* update_lt_;
    } command_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fcp_5fto_5ffcitx_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// CommandToFcitx

// .CommitText commit_text = 1;
inline bool CommandToFcitx::has_commit_text() const {
  return command_case() == kCommitText;
}
inline bool CommandToFcitx::_internal_has_commit_text() const {
  return command_case() == kCommitText;
}
inline void CommandToFcitx::set_has_commit_text() {
  _impl_._oneof_case_[0] = kCommitText;
}
inline void CommandToFcitx::clear_commit_text() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (command_case() == kCommitText) {
    if (GetArena() == nullptr) {
      delete _impl_.command_.commit_text_;
    }
    clear_has_command();
  }
}
inline ::CommitText* CommandToFcitx::release_commit_text() {
  // @@protoc_insertion_point(field_release:CommandToFcitx.commit_text)
  if (command_case() == kCommitText) {
    clear_has_command();
    auto* temp = _impl_.command_.commit_text_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.command_.commit_text_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CommitText& CommandToFcitx::_internal_commit_text() const {
  return command_case() == kCommitText ? *_impl_.command_.commit_text_ : reinterpret_cast<::CommitText&>(::_CommitText_default_instance_);
}
inline const ::CommitText& CommandToFcitx::commit_text() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CommandToFcitx.commit_text)
  return _internal_commit_text();
}
inline ::CommitText* CommandToFcitx::unsafe_arena_release_commit_text() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CommandToFcitx.commit_text)
  if (command_case() == kCommitText) {
    clear_has_command();
    auto* temp = _impl_.command_.commit_text_;
    _impl_.command_.commit_text_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CommandToFcitx::unsafe_arena_set_allocated_commit_text(::CommitText* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_command();
  if (value) {
    set_has_commit_text();
    _impl_.command_.commit_text_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CommandToFcitx.commit_text)
}
inline ::CommitText* CommandToFcitx::_internal_mutable_commit_text() {
  if (command_case() != kCommitText) {
    clear_command();
    set_has_commit_text();
    _impl_.command_.commit_text_ = CreateMaybeMessage<::CommitText>(GetArena());
  }
  return _impl_.command_.commit_text_;
}
inline ::CommitText* CommandToFcitx::mutable_commit_text() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::CommitText* _msg = _internal_mutable_commit_text();
  // @@protoc_insertion_point(field_mutable:CommandToFcitx.commit_text)
  return _msg;
}

// .UpdatePreedit update_preedut = 2;
inline bool CommandToFcitx::has_update_preedut() const {
  return command_case() == kUpdatePreedut;
}
inline bool CommandToFcitx::_internal_has_update_preedut() const {
  return command_case() == kUpdatePreedut;
}
inline void CommandToFcitx::set_has_update_preedut() {
  _impl_._oneof_case_[0] = kUpdatePreedut;
}
inline void CommandToFcitx::clear_update_preedut() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (command_case() == kUpdatePreedut) {
    if (GetArena() == nullptr) {
      delete _impl_.command_.update_preedut_;
    }
    clear_has_command();
  }
}
inline ::UpdatePreedit* CommandToFcitx::release_update_preedut() {
  // @@protoc_insertion_point(field_release:CommandToFcitx.update_preedut)
  if (command_case() == kUpdatePreedut) {
    clear_has_command();
    auto* temp = _impl_.command_.update_preedut_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.command_.update_preedut_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::UpdatePreedit& CommandToFcitx::_internal_update_preedut() const {
  return command_case() == kUpdatePreedut ? *_impl_.command_.update_preedut_ : reinterpret_cast<::UpdatePreedit&>(::_UpdatePreedit_default_instance_);
}
inline const ::UpdatePreedit& CommandToFcitx::update_preedut() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CommandToFcitx.update_preedut)
  return _internal_update_preedut();
}
inline ::UpdatePreedit* CommandToFcitx::unsafe_arena_release_update_preedut() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CommandToFcitx.update_preedut)
  if (command_case() == kUpdatePreedut) {
    clear_has_command();
    auto* temp = _impl_.command_.update_preedut_;
    _impl_.command_.update_preedut_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CommandToFcitx::unsafe_arena_set_allocated_update_preedut(::UpdatePreedit* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_command();
  if (value) {
    set_has_update_preedut();
    _impl_.command_.update_preedut_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CommandToFcitx.update_preedut)
}
inline ::UpdatePreedit* CommandToFcitx::_internal_mutable_update_preedut() {
  if (command_case() != kUpdatePreedut) {
    clear_command();
    set_has_update_preedut();
    _impl_.command_.update_preedut_ = CreateMaybeMessage<::UpdatePreedit>(GetArena());
  }
  return _impl_.command_.update_preedut_;
}
inline ::UpdatePreedit* CommandToFcitx::mutable_update_preedut() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::UpdatePreedit* _msg = _internal_mutable_update_preedut();
  // @@protoc_insertion_point(field_mutable:CommandToFcitx.update_preedut)
  return _msg;
}

// .UpdateLookuptable update_lt = 3;
inline bool CommandToFcitx::has_update_lt() const {
  return command_case() == kUpdateLt;
}
inline bool CommandToFcitx::_internal_has_update_lt() const {
  return command_case() == kUpdateLt;
}
inline void CommandToFcitx::set_has_update_lt() {
  _impl_._oneof_case_[0] = kUpdateLt;
}
inline void CommandToFcitx::clear_update_lt() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (command_case() == kUpdateLt) {
    if (GetArena() == nullptr) {
      delete _impl_.command_.update_lt_;
    }
    clear_has_command();
  }
}
inline ::UpdateLookuptable* CommandToFcitx::release_update_lt() {
  // @@protoc_insertion_point(field_release:CommandToFcitx.update_lt)
  if (command_case() == kUpdateLt) {
    clear_has_command();
    auto* temp = _impl_.command_.update_lt_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.command_.update_lt_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::UpdateLookuptable& CommandToFcitx::_internal_update_lt() const {
  return command_case() == kUpdateLt ? *_impl_.command_.update_lt_ : reinterpret_cast<::UpdateLookuptable&>(::_UpdateLookuptable_default_instance_);
}
inline const ::UpdateLookuptable& CommandToFcitx::update_lt() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CommandToFcitx.update_lt)
  return _internal_update_lt();
}
inline ::UpdateLookuptable* CommandToFcitx::unsafe_arena_release_update_lt() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CommandToFcitx.update_lt)
  if (command_case() == kUpdateLt) {
    clear_has_command();
    auto* temp = _impl_.command_.update_lt_;
    _impl_.command_.update_lt_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CommandToFcitx::unsafe_arena_set_allocated_update_lt(::UpdateLookuptable* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_command();
  if (value) {
    set_has_update_lt();
    _impl_.command_.update_lt_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CommandToFcitx.update_lt)
}
inline ::UpdateLookuptable* CommandToFcitx::_internal_mutable_update_lt() {
  if (command_case() != kUpdateLt) {
    clear_command();
    set_has_update_lt();
    _impl_.command_.update_lt_ = CreateMaybeMessage<::UpdateLookuptable>(GetArena());
  }
  return _impl_.command_.update_lt_;
}
inline ::UpdateLookuptable* CommandToFcitx::mutable_update_lt() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::UpdateLookuptable* _msg = _internal_mutable_update_lt();
  // @@protoc_insertion_point(field_mutable:CommandToFcitx.update_lt)
  return _msg;
}

inline bool CommandToFcitx::has_command() const {
  return command_case() != COMMAND_NOT_SET;
}
inline void CommandToFcitx::clear_has_command() {
  _impl_._oneof_case_[0] = COMMAND_NOT_SET;
}
inline CommandToFcitx::CommandCase CommandToFcitx::command_case() const {
  return CommandToFcitx::CommandCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// CommitText

// string text = 1;
inline void CommitText::clear_text() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.text_.ClearToEmpty();
}
inline const std::string& CommitText::text() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CommitText.text)
  return _internal_text();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CommitText::set_text(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.text_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:CommitText.text)
}
inline std::string* CommitText::mutable_text() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:CommitText.text)
  return _s;
}
inline const std::string& CommitText::_internal_text() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.text_.Get();
}
inline void CommitText::_internal_set_text(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.text_.Set(value, GetArena());
}
inline std::string* CommitText::_internal_mutable_text() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.text_.Mutable( GetArena());
}
inline std::string* CommitText::release_text() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CommitText.text)
  return _impl_.text_.Release();
}
inline void CommitText::set_allocated_text(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.text_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.text_.IsDefault()) {
          _impl_.text_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CommitText.text)
}

// -------------------------------------------------------------------

// UpdatePreedit

// string text = 1;
inline void UpdatePreedit::clear_text() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.text_.ClearToEmpty();
}
inline const std::string& UpdatePreedit::text() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:UpdatePreedit.text)
  return _internal_text();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UpdatePreedit::set_text(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.text_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:UpdatePreedit.text)
}
inline std::string* UpdatePreedit::mutable_text() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:UpdatePreedit.text)
  return _s;
}
inline const std::string& UpdatePreedit::_internal_text() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.text_.Get();
}
inline void UpdatePreedit::_internal_set_text(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.text_.Set(value, GetArena());
}
inline std::string* UpdatePreedit::_internal_mutable_text() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.text_.Mutable( GetArena());
}
inline std::string* UpdatePreedit::release_text() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:UpdatePreedit.text)
  return _impl_.text_.Release();
}
inline void UpdatePreedit::set_allocated_text(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.text_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.text_.IsDefault()) {
          _impl_.text_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:UpdatePreedit.text)
}

// -------------------------------------------------------------------

// UpdateLookuptable

// .LookupTable lt = 1;
inline bool UpdateLookuptable::has_lt() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.lt_ != nullptr);
  return value;
}
inline void UpdateLookuptable::clear_lt() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.lt_ != nullptr) _impl_.lt_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::LookupTable& UpdateLookuptable::_internal_lt() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::LookupTable* p = _impl_.lt_;
  return p != nullptr ? *p : reinterpret_cast<const ::LookupTable&>(::_LookupTable_default_instance_);
}
inline const ::LookupTable& UpdateLookuptable::lt() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:UpdateLookuptable.lt)
  return _internal_lt();
}
inline void UpdateLookuptable::unsafe_arena_set_allocated_lt(::LookupTable* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.lt_);
  }
  _impl_.lt_ = reinterpret_cast<::LookupTable*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UpdateLookuptable.lt)
}
inline ::LookupTable* UpdateLookuptable::release_lt() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::LookupTable* released = _impl_.lt_;
  _impl_.lt_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::LookupTable* UpdateLookuptable::unsafe_arena_release_lt() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:UpdateLookuptable.lt)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::LookupTable* temp = _impl_.lt_;
  _impl_.lt_ = nullptr;
  return temp;
}
inline ::LookupTable* UpdateLookuptable::_internal_mutable_lt() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.lt_ == nullptr) {
    auto* p = CreateMaybeMessage<::LookupTable>(GetArena());
    _impl_.lt_ = reinterpret_cast<::LookupTable*>(p);
  }
  return _impl_.lt_;
}
inline ::LookupTable* UpdateLookuptable::mutable_lt() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::LookupTable* _msg = _internal_mutable_lt();
  // @@protoc_insertion_point(field_mutable:UpdateLookuptable.lt)
  return _msg;
}
inline void UpdateLookuptable::set_allocated_lt(::LookupTable* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::LookupTable*>(_impl_.lt_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::LookupTable*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.lt_ = reinterpret_cast<::LookupTable*>(value);
  // @@protoc_insertion_point(field_set_allocated:UpdateLookuptable.lt)
}

// -------------------------------------------------------------------

// LookupTable

// repeated string candidates = 1;
inline int LookupTable::_internal_candidates_size() const {
  return _internal_candidates().size();
}
inline int LookupTable::candidates_size() const {
  return _internal_candidates_size();
}
inline void LookupTable::clear_candidates() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.candidates_.Clear();
}
inline std::string* LookupTable::add_candidates()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_candidates()->Add();
  // @@protoc_insertion_point(field_add_mutable:LookupTable.candidates)
  return _s;
}
inline const std::string& LookupTable::candidates(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:LookupTable.candidates)
  return _internal_candidates().Get(index);
}
inline std::string* LookupTable::mutable_candidates(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:LookupTable.candidates)
  return _internal_mutable_candidates()->Mutable(index);
}
inline void LookupTable::set_candidates(int index, const std::string& value) {
  _internal_mutable_candidates()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:LookupTable.candidates)
}
inline void LookupTable::set_candidates(int index, std::string&& value) {
  _internal_mutable_candidates()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:LookupTable.candidates)
}
inline void LookupTable::set_candidates(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_candidates()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:LookupTable.candidates)
}
inline void LookupTable::set_candidates(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_candidates()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:LookupTable.candidates)
}
inline void LookupTable::set_candidates(int index, absl::string_view value) {
  _internal_mutable_candidates()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:LookupTable.candidates)
}
inline void LookupTable::add_candidates(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_candidates()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:LookupTable.candidates)
}
inline void LookupTable::add_candidates(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_candidates()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:LookupTable.candidates)
}
inline void LookupTable::add_candidates(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_candidates()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:LookupTable.candidates)
}
inline void LookupTable::add_candidates(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_candidates()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:LookupTable.candidates)
}
inline void LookupTable::add_candidates(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_candidates()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:LookupTable.candidates)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
LookupTable::candidates() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:LookupTable.candidates)
  return _internal_candidates();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
LookupTable::mutable_candidates() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:LookupTable.candidates)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_candidates();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
LookupTable::_internal_candidates() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.candidates_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
LookupTable::_internal_mutable_candidates() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.candidates_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_fcp_5fto_5ffcitx_2eproto_2epb_2eh
