#[allow(dead_code)]
#[allow(non_camel_case_types)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum Key {
    A = 65,
    B = 66,
    C = 67,
    D = 68,
    E = 69,
    F = 70,
    G = 71,
    H = 72,
    I = 73,
    J = 74,
    K = 75,
    L = 76,
    M = 77,
    N = 78,
    O = 79,
    P = 80,
    Q = 81,
    R = 82,
    S = 83,
    T = 84,
    U = 85,
    V = 86,
    W = 87,
    X = 88,
    Y = 89,
    Z = 90,
    a = 97,
    b = 98,
    c = 99,
    d = 100,
    e = 101,
    f = 102,
    g = 103,
    h = 104,
    i = 105,
    j = 106,
    k = 107,
    l = 108,
    m = 109,
    n = 110,
    o = 111,
    p = 112,
    q = 113,
    r = 114,
    s = 115,
    t = 116,
    u = 117,
    v = 118,
    w = 119,
    x = 120,
    y = 121,
    z = 122,
    Comma = 44,
    Period = 46,
    Colon = 58,
    SemiColon = 59,
    DoubleQuote = 34,
    SingleQuote = 39,
    BracketOpen = 40,
    BracketClose = 41,
    QuestionMark = 63,
    Space = 32,
    Enter = 65293,
    Minus = 45,
    Equal = 61,
    Up = 65362,
    Down = 65364,
    Left = 65361,
    Right = 65363,
    Backspace = 65288,
    Escape = 65307,
    Shift = 65505,
    Ctrl = 65507,
    Alt = 65513,
    BackSlash = 92,
    ExclamationMark = 33,
    Ellipsis = 94,
    _0 = 48,
    _1 = 49,
    _2 = 50,
    _3 = 51,
    _4 = 52,
    _5 = 53,
    _6 = 54,
    _7 = 55,
    _8 = 56,
    _9 = 57,
}

impl Key {
    pub fn from_u32(num: u32) -> Option<Key> {
        match num {
            97 => Some(Key::a),
            98 => Some(Key::b),
            99 => Some(Key::c),
            100 => Some(Key::d),
            101 => Some(Key::e),
            102 => Some(Key::f),
            103 => Some(Key::g),
            104 => Some(Key::h),
            105 => Some(Key::i),
            106 => Some(Key::j),
            107 => Some(Key::k),
            108 => Some(Key::l),
            109 => Some(Key::m),
            110 => Some(Key::n),
            111 => Some(Key::o),
            112 => Some(Key::p),
            113 => Some(Key::q),
            114 => Some(Key::r),
            115 => Some(Key::s),
            116 => Some(Key::t),
            117 => Some(Key::u),
            118 => Some(Key::v),
            119 => Some(Key::w),
            120 => Some(Key::x),
            121 => Some(Key::y),
            122 => Some(Key::z),
            44 => Some(Key::Comma),
            46 => Some(Key::Period),
            58 => Some(Key::Colon),
            59 => Some(Key::SemiColon),
            32 => Some(Key::Space),
            34 => Some(Key::DoubleQuote),
            39 => Some(Key::SingleQuote),
            40 => Some(Key::BracketOpen),
            41 => Some(Key::BracketClose),
            63 => Some(Key::QuestionMark),
            65293 => Some(Key::Enter),
            45 => Some(Key::Minus),
            61 => Some(Key::Equal),
            65362 => Some(Key::Up),
            65364 => Some(Key::Down),
            65361 => Some(Key::Left),
            65363 => Some(Key::Right),
            65288 => Some(Key::Backspace),
            65307 => Some(Key::Escape),
            65505 => Some(Key::Shift),
            65507 => Some(Key::Ctrl),
            65513 => Some(Key::Alt),
            92 => Some(Key::BackSlash),
            33 => Some(Key::ExclamationMark),
            94 => Some(Key::Ellipsis),
            48 => Some(Key::_0),
            49 => Some(Key::_1),
            50 => Some(Key::_2),
            51 => Some(Key::_3),
            52 => Some(Key::_4),
            53 => Some(Key::_5),
            54 => Some(Key::_6),
            55 => Some(Key::_7),
            56 => Some(Key::_8),
            57 => Some(Key::_9),
            _ => None,
        }
    }

    pub fn to_char(self) -> Option<char> {
        match self {
            Key::a => Some('a'),
            Key::b => Some('b'),
            Key::c => Some('c'),
            Key::d => Some('d'),
            Key::e => Some('e'),
            Key::f => Some('f'),
            Key::g => Some('g'),
            Key::h => Some('h'),
            Key::i => Some('i'),
            Key::j => Some('j'),
            Key::k => Some('k'),
            Key::l => Some('l'),
            Key::m => Some('m'),
            Key::n => Some('n'),
            Key::o => Some('o'),
            Key::p => Some('p'),
            Key::q => Some('q'),
            Key::r => Some('r'),
            Key::s => Some('s'),
            Key::t => Some('t'),
            Key::u => Some('u'),
            Key::v => Some('v'),
            Key::w => Some('w'),
            Key::x => Some('x'),
            Key::y => Some('y'),
            Key::z => Some('z'),
            Key::A => Some('A'),
            Key::B => Some('B'),
            Key::C => Some('C'),
            Key::D => Some('D'),
            Key::E => Some('E'),
            Key::F => Some('F'),
            Key::G => Some('G'),
            Key::H => Some('H'),
            Key::I => Some('I'),
            Key::J => Some('J'),
            Key::K => Some('K'),
            Key::L => Some('L'),
            Key::M => Some('M'),
            Key::N => Some('N'),
            Key::O => Some('O'),
            Key::P => Some('P'),
            Key::Q => Some('Q'),
            Key::R => Some('R'),
            Key::S => Some('S'),
            Key::T => Some('T'),
            Key::U => Some('U'),
            Key::V => Some('V'),
            Key::W => Some('W'),
            Key::X => Some('X'),
            Key::Y => Some('Y'),
            Key::Z => Some('Z'),
            _ => None,
        }
    }

    pub fn to_usize(self) -> Option<usize> {
        match self {
            Key::_0 => Some(0),
            Key::_1 => Some(1),
            Key::_2 => Some(2),
            Key::_3 => Some(3),
            Key::_4 => Some(4),
            Key::_5 => Some(5),
            Key::_6 => Some(6),
            Key::_7 => Some(7),
            Key::_8 => Some(8),
            Key::_9 => Some(9),
            _ => None,
        }
    }

    pub fn to_full_width_string(self) -> Option<String> {
        match self {
            Key::Comma => Some("，".to_owned()),
            Key::Period => Some("。".to_owned()),
            Key::SemiColon => Some("；".to_owned()),
            Key::Colon => Some("：".to_owned()),
            Key::SingleQuote => Some("‘’".to_owned()),
            Key::DoubleQuote => Some("“”".to_owned()),
            Key::QuestionMark => Some("？".to_owned()),
            Key::BracketOpen => Some("（".to_owned()),
            Key::BracketClose => Some("）".to_owned()),
            Key::BackSlash => Some("、".to_owned()),
            Key::ExclamationMark => Some("！".to_owned()),
            Key::Ellipsis => Some("…".to_owned()),
            _ => None,
        }
    }
}
