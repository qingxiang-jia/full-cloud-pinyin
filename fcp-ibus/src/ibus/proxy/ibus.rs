//! # DBus interface proxies for: `org.freedesktop.IBus.Service`, `org.freedesktop.IBus.Factory`, `org.freedesktop.IBus.Service`, `org.freedesktop.IBus.Engine`, `org.freedesktop.IBus.Panel`
//!
//! This code was generated by `zbus-xmlgen` `3.1.0` from DBus introspection data.
//! Source: `interfaces.xml`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the
//! [Writing a client proxy](https://dbus.pages.freedesktop.org/zbus/client.html)
//! section of the zbus documentation.
//!

use zbus::dbus_proxy;

#[dbus_proxy(interface = "org.freedesktop.IBus", assume_defaults = true)]
trait IBus {
    /// CreateInputContext method
    fn create_input_context(
        &self,
        client_name: &str,
    ) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

    /// CurrentInputContext method
    fn current_input_context(&self) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

    /// Exit method
    fn exit(&self, restart: bool) -> zbus::Result<()>;

    /// GetAddress method
    fn get_address(&self) -> zbus::Result<String>;

    /// GetEnginesByNames method
    fn get_engines_by_names(&self, names: &[&str])
        -> zbus::Result<Vec<zbus::zvariant::OwnedValue>>;

    /// GetGlobalEngine method
    fn get_global_engine(&self) -> zbus::Result<zbus::zvariant::OwnedValue>;

    /// GetUseGlobalEngine method
    fn get_use_global_engine(&self) -> zbus::Result<bool>;

    /// GetUseSysLayout method
    fn get_use_sys_layout(&self) -> zbus::Result<bool>;

    /// IsGlobalEngineEnabled method
    fn is_global_engine_enabled(&self) -> zbus::Result<bool>;

    /// ListActiveEngines method
    fn list_active_engines(&self) -> zbus::Result<Vec<zbus::zvariant::OwnedValue>>;

    /// ListEngines method
    fn list_engines(&self) -> zbus::Result<Vec<zbus::zvariant::OwnedValue>>;

    /// Ping method
    fn ping(&self, data: &zbus::zvariant::Value<'_>) -> zbus::Result<zbus::zvariant::OwnedValue>;

    /// RegisterComponent method
    fn register_component(&self, component: &zbus::zvariant::Value<'_>) -> zbus::Result<()>;

    /// SetGlobalEngine method
    fn set_global_engine(&self, engine_name: &str) -> zbus::Result<()>;

    /// GlobalEngineChanged signal
    #[dbus_proxy(signal)]
    fn global_engine_changed(&self, engine_name: &str) -> zbus::Result<()>;

    /// RegistryChanged signal
    #[dbus_proxy(signal)]
    fn registry_changed(&self) -> zbus::Result<()>;

    /// ActiveEngines property
    #[dbus_proxy(property)]
    fn active_engines(&self) -> zbus::Result<Vec<zbus::zvariant::OwnedValue>>;

    /// Address property
    #[dbus_proxy(property)]
    fn address(&self) -> zbus::Result<String>;

    /// EmbedPreeditText property
    #[dbus_proxy(property)]
    fn embed_preedit_text(&self) -> zbus::Result<bool>;
    fn set_embed_preedit_text(&self, value: bool) -> zbus::Result<()>;

    /// Engines property
    #[dbus_proxy(property)]
    fn engines(&self) -> zbus::Result<Vec<zbus::zvariant::OwnedValue>>;

    /// GlobalEngine property
    #[dbus_proxy(property)]
    fn global_engine(&self) -> zbus::Result<zbus::zvariant::OwnedValue>;

    /// PreloadEngines property
    #[dbus_proxy(property)]
    fn set_preload_engines(&self, value: &[&str]) -> zbus::Result<()>;
}